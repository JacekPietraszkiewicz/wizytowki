from faker import Faker

class BaseContact:
    def __init__(self, name, surname, phone, email):
        self.name = name
        self.surname = surname
        self.phone = phone
        self.email = email
        #VARIABLES
        self._label_length = 0

    def __str__(self):
        return f'{self.name} {self.surname}'

    def contact(self):
        return f'Wybieram numer {self.phone} i dzwonię do {self.name} {self.surname}'


    @property
    def label_length(self):
        self._label_length = len(f'{self.name} {self.surname}')
        return self._label_length

class BussinesContact(BaseContact):
    def __init__(self, office, company, company_phone, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.office = office
        self.company = company
        self.company_phone = company_phone

    def contact(self):
        return f'Wybieram numer {self.company_phone} i dzwonię do {self.name} {self.surname} z firmy {self.company}'



def generator(rodzaj):
    dane = Faker('pl_PL')
    imie = rozdziel_imie(dane.name())
    if rodzaj:
        wiz = BaseContact(name=imie[0], surname=imie[1], phone=dane.phone_number(), email=dane.email())
    else:
        wiz = BussinesContact(name=imie[0], surname=imie[1], phone=dane.phone_number(), email=dane.email(),
                            company=dane.company(), office=dane.job(), company_phone = dane.phone_number())
    return wiz

def rozdziel_imie(name):
    imie = name.split(' ')
    return imie

def create_contacts(rodzaj, ilosc):
    wiz = []
    for i in range(ilosc):
          wiz.append(generator(rodzaj))
    return wiz


bas = create_contacts(True, 2)
biz = create_contacts(False, 2)


print(biz[0].contact())
print(bas[1].contact())

print(f'Długość imienia i nazwiska {bas[1].name} {bas[1].surname}: {bas[1].label_length}')
print(f'Długość imienia i nazwiska {biz[1].name} {biz[1].surname}: {biz[1].label_length}')

